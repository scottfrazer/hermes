grammar {
  lexer {
    partials {
      r'\#.*' -> _comment
      r'\s+' -> _ws
      r'[a-zA-Z][a-zA-Z0-9_]*' -> _identifier
      r':({%_identifier%}|_empty)' -> _terminal
      r'\$({%_identifier%})' -> _nonterminal
      r'(r\'.*\'|".*")' -> _regex
    }

    r'(grammar)\s*({)' -> :grammar[1] :lbrace[2] @grammar
    r'{%_ws%}' -> null
    r'{%_comment%}' -> null

    mode<grammar> {
      r'{%_ws%}' -> null
      r'{%_comment%}' -> null
      r'}' -> :rbrace %pop
      r'lexer' -> :lexer @lexer
      r'parser' -> :parser @parser
    }

    mode<lexer> {
      r'{%_ws%}' -> null
      r'{%_comment%}' -> null
      r'code<([a-z]+)>' -> code_block()
      r'}' -> :rbrace %pop
      r'{' -> :lbrace
      r'<' -> :langle
      r'>' -> :rangle
      r'\(' -> :lparen
      r'\)' -> :rparen
      r'\[\]' -> :no_group
      r'\[' -> :lsquare
      r'\]' -> :rsquare
      r'[0-9]+' -> :integer
      r'{%_regex%}' -> :regex @regex_options
      r'->' -> :arrow
      r',' -> :comma
      r'@({%_identifier%})' -> :stack_push[1]
      r'%({%_identifier%})' -> :action[1]
      r'{%_terminal%}' -> :terminal[1]
      r'_{%_identifier%}' -> :regex_partial
      r'null' -> :null
      r'mode' -> :mode @lexer
      r'partials' -> :partials @lexer
      r'enum' -> :regex_enum @regex_enum
      r'{%_identifier%}' -> :identifier
    }

    code<go> << GO_CODE
      func code_block(ctx *LexerContext, terminal *terminal, sourceString string, line, col int) int {
        codeRegex := regexp.MustCompile("code<([a-z]+)>\\s+<<\\s+([a-zA-Z0-9_-]+)")
        groups := codeRegex.FindStringSubmatch(ctx.source)
				_ = codeRegex.FindStringSubmatchIndex(ctx.source)

        ctx.emit(findTerminal("code_start"), "code", line, col)

        language := groups[1]
        line2, col2 := _advance_line_col(ctx.source, len("code<"), line, col)
        ctx.emit(findTerminal("language"), language, line2, col2)

        delimiter := groups[2]
        index := strings.Index(ctx.source[len(groups[0]):], delimiter)
        code := ctx.source[len(groups[0]):index+len(groups[0])]
        line3, col3 := _advance_line_col(ctx.source, len(groups[0]), line, col)
        ctx.emit(findTerminal("code"), code, line3, col3)

        return index + len(groups[0]) + len(delimiter)
      }

      func expr_rule_rhs(ctx *LexerContext, terminal *terminal, sourceString string, line, col int) int {
        // :infix_rule_hint[] :nonterminal[2] :terminal[4] :nonterminal[2] (!:terminal | :nonterminal)
        // :prefix_rule_hint[] :terminal[4] :nonterminal[2] (!:terminal | :nonterminal)
        // :mixfix_rule_hint[] (!:terminal | :nonterminal)

        ctx.StackPush("expr_rule_rhs")
        peek := ctx._peek(6)
        ctx.StackPop()

        var tokens []*Token
        for _, token := range peek {
          if token.line == peek[0].line {
            tokens = append(tokens, token)
          }
        }

        lhs := tokens[0].sourceString

        hint := findTerminal("mixfix_rule_hint")

        if len(tokens) >= 5 {
          rhs1 := tokens[2].sourceString
          rhs2 := tokens[4].sourceString
          morphemeNext := false
          if len(tokens) > 5 && (tokens[5].terminal.id == findTerminal("nonterminal").id || tokens[5].terminal.id == findTerminal("terminal").id) {
            morphemeNext = true
          }

          if rhs1 == lhs && rhs2 == lhs && !morphemeNext {
            hint = findTerminal("infix_rule_hint")
          }
        }

        if len(tokens) >= 4 {
          rhs1 := tokens[3].sourceString
          morphemeNext := false
          if len(tokens) > 4 && (tokens[4].terminal.id == findTerminal("nonterminal").id || tokens[4].terminal.id == findTerminal("terminal").id) {
            morphemeNext = true
          }
          if rhs1 == lhs && !morphemeNext {
            hint = findTerminal("prefix_rule_hint")
          }
        }

        ctx.emit(hint, "", line, col)
        return -1
      }
    GO_CODE

    mode<regex_enum> {
      r'{%_ws%}' -> null
      r'{%_comment%}' -> null
      r'}' -> :rbrace %pop
      r'{' -> :lbrace
      r'\(' -> :lparen
      r'\)' -> :rparen
      r':' -> :colon
      r',' -> :comma
      r'{%_regex%}' -> :regex
      r'{%_identifier%}' -> :identifier
    }

    # TODO: Remove this
    mode<regex_options> {
      r'{%_ws%}' -> null
      r'{%_comment%}' -> null
      r'{%_identifier%}' -> :identifier
      r',' -> :comma
      r'{' -> :lbrace
      r'}' -> :rbrace
      r'->' -> :arrow %pop
    }

    mode<parser> {
      r'{%_ws%}' -> null
      r'{%_comment%}' -> null
      r'{' -> :lbrace
      r'}' -> :rbrace %pop
      r'\|' -> :pipe
      r'=' -> :equals
      r'\(' -> :lparen
      r'\)' -> :rparen
      r',' -> :comma
      r'->' -> :arrow
      r'null' -> :null
      r'parser\s*<\s*expression\s*>\s*({)' -> :parser_expression[] :lbrace[1] @parser_expr
      r'{%_terminal%}' -> :terminal[1]
      r'{%_nonterminal%}\s*(\=)' -> :ll1_rule_hint[] :nonterminal[1] :equals[2]
      r'{%_nonterminal%}' -> :nonterminal[1]
      r'\$([0-9]+|\$)' -> :nonterminal_reference[1]
      r'{%_identifier%}' -> :identifier
      r'"[^"]+"' -> :string
      r'[0-9]+' -> :integer
    }

    mode<parser_expr> {
      r'{%_ws%}' -> null
      r'{%_comment%}' -> null
      r'(\()\s*(\*)' -> :lparen[1] :asterisk[2] @binding_power
      r'(\()\s*(\-)' -> :lparen[1] :dash[2] @binding_power
      r'->' -> :arrow
      r'<=>' -> :expression_divider
      r'\|' -> :pipe
      r'=' -> :equals
      r'{' -> :lbrace
      r'}' -> :rbrace %pop
      r'\(' -> :lparen
      r'\)' -> :rparen
      r',' -> :comma
      r'{%_terminal%}' -> :terminal[1]

      #r'({%_nonterminal%})[ \t]*(=)[ \t]*\1[ \t]+:({%_identifier%})[ \t]+\1(?![ \t]+(:|\$))'
      #    -> :expr_rule_hint[] :nonterminal[2] :equals[3] :infix_rule_hint[] :nonterminal[2] :terminal[4] :nonterminal[2]
      #r'({%_nonterminal%})[ \t]*(=)[ \t]*:({%_identifier%})[ \t]+\1(?![ \t](:|\$))'
      #    -> :expr_rule_hint[] :nonterminal[2] :equals[3] :prefix_rule_hint[] :terminal[4] :nonterminal[2]
      #r'{%_nonterminal%}\s*(=)'
      #    -> :expr_rule_hint[] :nonterminal[1] :equals[2] :mixfix_rule_hint[]

      r'({%_nonterminal%})\s*(=)\s*'
          -> :expr_rule_hint[] :nonterminal[2] :equals[3] expr_rule_rhs()

      r'{%_nonterminal%}' -> :nonterminal[1]
      r'\$([0-9]+|\$)' -> :nonterminal_reference[1]
      r'{%_identifier%}' -> :identifier
      r'"[^"]+"' -> :string
      r'[0-9]+' -> :integer
    }

    mode<expr_rule_rhs> {
      r'{%_ws%}' -> null
      r'=' -> :equals
      r'->' -> :arrow
      r'{%_terminal%}' -> :terminal[1]
      r'{%_nonterminal%}' -> :nonterminal[1]
    }

    mode<binding_power> {
      r'{%_ws%}' -> null
      r'\*' -> :asterisk
      r'-' -> :dash
      r':' -> :colon
      r'left' -> :left
      r'right' -> :right
      r'unary' -> :unary
      r'\)' -> :rparen %pop
    }
  }

  parser {
    $grammar = :grammar :lbrace list($body_element) :rbrace -> Grammar(body=$2)
    $body_element = $body_element_sub -> $0
    $body_element_sub = $lexer | $parser
    $lexer = :lexer :lbrace list($lexer_atom) :rbrace -> Lexer(atoms=$2)
    $lexer_atom = $lexer_regex | $lexer_mode | $lexer_partials | $lexer_code
    $lexer_code = :code_start :language :code -> LexerCode(language=$1, code=$2)
    $lexer_partials = :partials :lbrace list($regex_partial) :rbrace -> RegexPartials(list=$2)
    $regex_partial = :regex :arrow :regex_partial -> RegexPartial(regex=$0, name=$2)
    $lexer_regex = $enumerated_regex | :regex optional($regex_options) :arrow list($lexer_target) -> Regex(regex=$0, options=$1, onmatch=$3)
    $enumerated_regex = :regex_enum :lbrace list($regex_enumeration) :rbrace :arrow list($lexer_target) -> EnumeratedRegex(enums=$2, onmatch=$5)
    $regex_enumeration = :identifier :colon :regex optional($regex_enumeration_options) -> RegexEnum(language=$0, regex=$2, options=$3)
    $regex_enumeration_options = :lparen list(:identifier, :comma) :rparen -> $1
    $regex_options = :lbrace list(:identifier, :comma) :rbrace -> $1
    $lexer_target = $terminal | :identifier :lparen optional($terminal) :rparen -> LexerFunctionCall(name=$0, terminal=$2)
    $lexer_target = $terminal | :stack_push | :action
    $terminal = :terminal optional($match_group) -> Terminal(name=$0, group=$1)
    $match_group = :lsquare :integer :rsquare -> $1
    $match_group = :no_group
    $lexer_target = :null -> Null()
    $lexer_mode = :mode :langle :identifier :rangle :lbrace list($lexer_atom) :rbrace -> Mode(name=$2, atoms=$5)
    $parser = $parser_ll1 | $parser_expression
    $parser_ll1 = :parser :lbrace list($ll1_rule) :rbrace -> Parser(rules=$2)
    $ll1_rule = :ll1_rule_hint :nonterminal :equals $ll1_rule_rhs -> Rule(nonterminal=$1, production=$3)
    $ll1_rule_rhs = list($rule, :pipe)
    $rule = list($morpheme) optional($ast_transform) -> Production(morphemes=$0, ast=$1)
    $ll1_rule_rhs = :null -> NullProduction()
    $ll1_rule_rhs = $parser
    $parser_expression = :parser_expression :lbrace list($expression_rule) :rbrace -> ExpressionParser(rules=$2)
    $expression_rule = optional($binding_power) :expr_rule_hint :nonterminal :equals $expression_rule_production
        -> ExpressionRule(precedence=$0, nonterminal=$2, production=$4)
    $expression_rule_production = :mixfix_rule_hint $nud optional($ast_transform) optional($led) optional($ast_transform)
        -> MixfixProduction(nud=$1, nud_ast=$2, led=$3, ast=$4)
    $expression_rule_production = :prefix_rule_hint list($morpheme) optional($ast_transform) -> PrefixProduction(morphemes=$1, ast=$2)
    $expression_rule_production = :infix_rule_hint list($morpheme) optional($ast_transform) -> InfixProduction(morphemes=$1, ast=$2)
    $nud = list($morpheme)
    $led = :expression_divider list($morpheme) -> $1
    $binding_power = :lparen $precedence :rparen -> $1
    $precedence = $binding_power_marker :colon $associativity -> Precedence(marker=$0, associativity=$2)
    $binding_power_marker = :asterisk | :dash
    $associativity = :left | :right | :unary
    $morpheme = :terminal | :nonterminal | $macro
    $ast_transform = :arrow $ast_transform_sub -> $1
    $ast_transform_sub = :identifier :lparen list($ast_parameter, :comma) :rparen -> AstTransformation(name=$0, parameters=$2)
    $ast_transform_sub = :nonterminal_reference
    $ast_parameter = :identifier :equals :nonterminal_reference -> AstParameter(name=$0, index=$2)
    $macro = :identifier :lparen list($macro_parameter, :comma) :rparen -> Macro(name=$0, parameters=$2)
    $macro_parameter = :nonterminal | :terminal | :string | :integer | :null
  }
}
