<grammar (line 1 col 1) `grammar`>
<lbrace (line 1 col 9) `{`>
<parser_ll1 (line 2 col 3) `parser<ll1>`>
<lbrace (line 2 col 15) `{`>
<ll1_rule_hint (line 3 col 5) ``>
<nonterminal (line 3 col 5) `start`>
<equals (line 3 col 12) `=`>
<identifier (line 3 col 14) `list`>
<lparen (line 3 col 18) `(`>
<nonterminal (line 3 col 19) `statements`>
<comma (line 3 col 30) `,`>
<terminal (line 3 col 32) `comma`>
<rparen (line 3 col 38) `)`>
<arrow (line 3 col 40) `->`>
<identifier (line 3 col 43) `Program`>
<lparen (line 3 col 50) `(`>
<identifier (line 3 col 52) `statements`>
<equals (line 3 col 62) `=`>
<nonterminal_reference (line 3 col 63) `0`>
<rparen (line 3 col 66) `)`>
<ll1_rule_hint (line 4 col 5) ``>
<nonterminal (line 4 col 5) `start`>
<equals (line 4 col 12) `=`>
<terminal (line 4 col 14) `_empty`>
<ll1_rule_hint (line 5 col 5) ``>
<nonterminal (line 5 col 5) `statements`>
<equals (line 5 col 17) `=`>
<nonterminal (line 5 col 19) `e`>
<ll1_rule_hint (line 6 col 5) ``>
<nonterminal (line 6 col 5) `statements`>
<equals (line 6 col 17) `=`>
<nonterminal (line 6 col 19) `assignstatement`>
<ll1_rule_hint (line 7 col 5) ``>
<nonterminal (line 7 col 5) `assignstatement`>
<equals (line 7 col 22) `=`>
<terminal (line 7 col 24) `identifier`>
<terminal (line 7 col 36) `eq`>
<nonterminal (line 7 col 40) `e`>
<arrow (line 7 col 43) `->`>
<identifier (line 7 col 46) `Assign`>
<lparen (line 7 col 52) `(`>
<identifier (line 7 col 54) `var`>
<equals (line 7 col 57) `=`>
<nonterminal_reference (line 7 col 58) `0`>
<comma (line 7 col 60) `,`>
<identifier (line 7 col 62) `val`>
<equals (line 7 col 65) `=`>
<nonterminal_reference (line 7 col 66) `2`>
<rparen (line 7 col 69) `)`>
<ll1_rule_hint (line 8 col 5) ``>
<nonterminal (line 8 col 5) `e`>
<equals (line 8 col 8) `=`>
<parser_expression (line 8 col 10) `parser<expression>`>
<lbrace (line 8 col 29) `{`>
<lparen (line 9 col 7) `(`>
<asterisk (line 9 col 7) `*`>
<colon (line 9 col 7) `:`>
<left (line 9 col 7) `left`>
<rparen (line 9 col 7) `)`>
<expr_rule_hint (line 9 col 16) ``>
<nonterminal (line 9 col 16) `e`>
<equals (line 9 col 16) `=`>
<infix_rule_hint (line 9 col 16) ``>
<nonterminal (line 9 col 16) `e`>
<terminal (line 9 col 16) `add`>
<nonterminal (line 9 col 16) `e`>
<arrow (line 9 col 32) `->`>
<identifier (line 9 col 35) `Add`>
<lparen (line 9 col 38) `(`>
<identifier (line 9 col 40) `lhs`>
<equals (line 9 col 43) `=`>
<nonterminal_reference (line 9 col 44) `0`>
<comma (line 9 col 46) `,`>
<identifier (line 9 col 48) `rhs`>
<equals (line 9 col 51) `=`>
<nonterminal_reference (line 9 col 52) `2`>
<rparen (line 9 col 55) `)`>
<lparen (line 10 col 7) `(`>
<dash (line 10 col 7) `-`>
<colon (line 10 col 7) `:`>
<left (line 10 col 7) `left`>
<rparen (line 10 col 7) `)`>
<expr_rule_hint (line 10 col 16) ``>
<nonterminal (line 10 col 16) `e`>
<equals (line 10 col 16) `=`>
<infix_rule_hint (line 10 col 16) ``>
<nonterminal (line 10 col 16) `e`>
<terminal (line 10 col 16) `sub`>
<nonterminal (line 10 col 16) `e`>
<arrow (line 10 col 32) `->`>
<identifier (line 10 col 35) `Subtract`>
<lparen (line 10 col 43) `(`>
<identifier (line 10 col 45) `lhs`>
<equals (line 10 col 48) `=`>
<nonterminal_reference (line 10 col 49) `0`>
<comma (line 10 col 51) `,`>
<identifier (line 10 col 53) `rhs`>
<equals (line 10 col 56) `=`>
<nonterminal_reference (line 10 col 57) `2`>
<rparen (line 10 col 60) `)`>
<lparen (line 11 col 7) `(`>
<asterisk (line 11 col 7) `*`>
<colon (line 11 col 7) `:`>
<left (line 11 col 7) `left`>
<rparen (line 11 col 7) `)`>
<expr_rule_hint (line 11 col 16) ``>
<nonterminal (line 11 col 16) `e`>
<equals (line 11 col 16) `=`>
<infix_rule_hint (line 11 col 16) ``>
<nonterminal (line 11 col 16) `e`>
<terminal (line 11 col 16) `mul`>
<nonterminal (line 11 col 16) `e`>
<arrow (line 11 col 32) `->`>
<identifier (line 11 col 35) `Multiply`>
<lparen (line 11 col 43) `(`>
<identifier (line 11 col 45) `lhs`>
<equals (line 11 col 48) `=`>
<nonterminal_reference (line 11 col 49) `0`>
<comma (line 11 col 51) `,`>
<identifier (line 11 col 53) `rhs`>
<equals (line 11 col 56) `=`>
<nonterminal_reference (line 11 col 57) `2`>
<rparen (line 11 col 60) `)`>
<lparen (line 12 col 7) `(`>
<dash (line 12 col 7) `-`>
<colon (line 12 col 7) `:`>
<left (line 12 col 7) `left`>
<rparen (line 12 col 7) `)`>
<expr_rule_hint (line 12 col 16) ``>
<nonterminal (line 12 col 16) `e`>
<equals (line 12 col 16) `=`>
<infix_rule_hint (line 12 col 16) ``>
<nonterminal (line 12 col 16) `e`>
<terminal (line 12 col 16) `div`>
<nonterminal (line 12 col 16) `e`>
<arrow (line 12 col 32) `->`>
<identifier (line 12 col 35) `Divide`>
<lparen (line 12 col 41) `(`>
<identifier (line 12 col 43) `lhs`>
<equals (line 12 col 46) `=`>
<nonterminal_reference (line 12 col 47) `0`>
<comma (line 12 col 49) `,`>
<identifier (line 12 col 51) `rhs`>
<equals (line 12 col 54) `=`>
<nonterminal_reference (line 12 col 55) `2`>
<rparen (line 12 col 58) `)`>
<lparen (line 13 col 7) `(`>
<asterisk (line 13 col 7) `*`>
<colon (line 13 col 7) `:`>
<unary (line 13 col 7) `unary`>
<rparen (line 13 col 7) `)`>
<expr_rule_hint (line 13 col 17) ``>
<nonterminal (line 13 col 17) `e`>
<equals (line 13 col 17) `=`>
<prefix_rule_hint (line 13 col 17) ``>
<terminal (line 13 col 17) `sub`>
<nonterminal (line 13 col 17) `e`>
<arrow (line 13 col 30) `->`>
<identifier (line 13 col 33) `Uminus`>
<lparen (line 13 col 39) `(`>
<identifier (line 13 col 41) `arg`>
<equals (line 13 col 44) `=`>
<nonterminal_reference (line 13 col 45) `1`>
<rparen (line 13 col 48) `)`>
<expr_rule_hint (line 14 col 7) ``>
<nonterminal (line 14 col 7) `e`>
<equals (line 14 col 7) `=`>
<mixfix_rule_hint (line 14 col 7) ``>
<terminal (line 14 col 12) `a`>
<expr_rule_hint (line 15 col 7) ``>
<nonterminal (line 15 col 7) `e`>
<equals (line 15 col 7) `=`>
<mixfix_rule_hint (line 15 col 7) ``>
<terminal (line 15 col 12) `b`>
<rbrace (line 16 col 5) `}`>
<rbrace (line 17 col 3) `}`>
<rbrace (line 18 col 1) `}`>