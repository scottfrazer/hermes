<grammar (line 1 col 1) `grammar`>
<lbrace (line 1 col 9) `{`>
<parser_ll1 (line 2 col 3) `parser<ll1>`>
<lbrace (line 2 col 15) `{`>
<ll1_rule_hint (line 3 col 5) ``>
<nonterminal (line 3 col 5) `start`>
<equals (line 3 col 12) `=`>
<identifier (line 3 col 14) `list`>
<lparen (line 3 col 18) `(`>
<nonterminal (line 3 col 19) `statement`>
<rparen (line 3 col 29) `)`>
<ll1_rule_hint (line 4 col 5) ``>
<nonterminal (line 4 col 5) `statement`>
<equals (line 4 col 16) `=`>
<nonterminal (line 4 col 18) `funcdef`>
<ll1_rule_hint (line 5 col 5) ``>
<nonterminal (line 5 col 5) `statement`>
<equals (line 5 col 16) `=`>
<nonterminal (line 5 col 18) `classdef`>
<ll1_rule_hint (line 6 col 5) ``>
<nonterminal (line 6 col 5) `statement`>
<equals (line 6 col 16) `=`>
<terminal (line 6 col 18) `a`>
<ll1_rule_hint (line 7 col 5) ``>
<nonterminal (line 7 col 5) `statement`>
<equals (line 7 col 16) `=`>
<terminal (line 7 col 18) `b`>
<ll1_rule_hint (line 8 col 5) ``>
<nonterminal (line 8 col 5) `funcdef`>
<equals (line 8 col 14) `=`>
<terminal (line 8 col 16) `function`>
<terminal (line 8 col 26) `identifier`>
<terminal (line 8 col 38) `lparen`>
<identifier (line 8 col 46) `list`>
<lparen (line 8 col 50) `(`>
<nonterminal (line 8 col 51) `param`>
<comma (line 8 col 57) `,`>
<terminal (line 8 col 59) `comma`>
<rparen (line 8 col 65) `)`>
<terminal (line 8 col 67) `rparen`>
<terminal (line 8 col 75) `lbrace`>
<identifier (line 8 col 83) `list`>
<lparen (line 8 col 87) `(`>
<nonterminal (line 8 col 88) `statement`>
<rparen (line 8 col 98) `)`>
<terminal (line 8 col 100) `rbrace`>
<ll1_rule_hint (line 9 col 5) ``>
<nonterminal (line 9 col 5) `param`>
<equals (line 9 col 12) `=`>
<terminal (line 9 col 14) `param1`>
<ll1_rule_hint (line 10 col 5) ``>
<nonterminal (line 10 col 5) `param`>
<equals (line 10 col 12) `=`>
<terminal (line 10 col 14) `param2`>
<ll1_rule_hint (line 11 col 5) ``>
<nonterminal (line 11 col 5) `classdef`>
<equals (line 11 col 15) `=`>
<terminal (line 11 col 17) `class`>
<terminal (line 11 col 24) `identifier`>
<terminal (line 11 col 36) `lbrace`>
<identifier (line 11 col 44) `list`>
<lparen (line 11 col 48) `(`>
<nonterminal (line 11 col 49) `class_statement`>
<rparen (line 11 col 65) `)`>
<terminal (line 11 col 67) `rbrace`>
<ll1_rule_hint (line 12 col 5) ``>
<nonterminal (line 12 col 5) `class_statement`>
<equals (line 12 col 22) `=`>
<terminal (line 12 col 24) `private`>
<nonterminal (line 12 col 33) `class_atom`>
<ll1_rule_hint (line 13 col 5) ``>
<nonterminal (line 13 col 5) `class_statement`>
<equals (line 13 col 22) `=`>
<terminal (line 13 col 24) `public`>
<nonterminal (line 13 col 32) `class_atom`>
<ll1_rule_hint (line 14 col 5) ``>
<nonterminal (line 14 col 5) `class_atom`>
<equals (line 14 col 17) `=`>
<nonterminal (line 14 col 19) `funcdef`>
<ll1_rule_hint (line 15 col 5) ``>
<nonterminal (line 15 col 5) `class_atom`>
<equals (line 15 col 17) `=`>
<terminal (line 15 col 19) `x`>
<ll1_rule_hint (line 16 col 5) ``>
<nonterminal (line 16 col 5) `class_atom`>
<equals (line 16 col 17) `=`>
<terminal (line 16 col 19) `y`>
<rbrace (line 17 col 3) `}`>
<rbrace (line 18 col 1) `}`>