<grammar (line 1 col 1) `grammar`>
<lbrace (line 1 col 9) `{`>
<parser_ll1 (line 2 col 3) `parser<ll1>`>
<lbrace (line 2 col 15) `{`>
<ll1_rule_hint (line 3 col 5) ``>
<nonterminal (line 3 col 5) `start`>
<equals (line 3 col 12) `=`>
<identifier (line 3 col 14) `list`>
<lparen (line 3 col 18) `(`>
<nonterminal (line 3 col 19) `sub`>
<comma (line 3 col 23) `,`>
<terminal (line 3 col 25) `comma`>
<rparen (line 3 col 31) `)`>
<ll1_rule_hint (line 4 col 5) ``>
<nonterminal (line 4 col 5) `sub`>
<equals (line 4 col 10) `=`>
<nonterminal (line 4 col 12) `item`>
<ll1_rule_hint (line 5 col 5) ``>
<nonterminal (line 5 col 5) `sub`>
<equals (line 5 col 10) `=`>
<nonterminal (line 5 col 12) `e`>
<ll1_rule_hint (line 6 col 5) ``>
<nonterminal (line 6 col 5) `item`>
<equals (line 6 col 11) `=`>
<terminal (line 6 col 13) `b`>
<ll1_rule_hint (line 7 col 5) ``>
<nonterminal (line 7 col 5) `item`>
<equals (line 7 col 11) `=`>
<terminal (line 7 col 13) `a`>
<ll1_rule_hint (line 8 col 5) ``>
<nonterminal (line 8 col 5) `type_name`>
<equals (line 8 col 16) `=`>
<terminal (line 8 col 18) `int`>
<ll1_rule_hint (line 9 col 5) ``>
<nonterminal (line 9 col 5) `type_name`>
<equals (line 9 col 16) `=`>
<terminal (line 9 col 18) `char`>
<ll1_rule_hint (line 10 col 5) ``>
<nonterminal (line 10 col 5) `comma_opt`>
<equals (line 10 col 16) `=`>
<terminal (line 10 col 18) `comma`>
<ll1_rule_hint (line 11 col 5) ``>
<nonterminal (line 11 col 5) `comma_opt`>
<equals (line 11 col 16) `=`>
<terminal (line 11 col 18) `_empty`>
<ll1_rule_hint (line 12 col 5) ``>
<nonterminal (line 12 col 5) `initializer_list_item`>
<equals (line 12 col 28) `=`>
<terminal (line 12 col 30) `item`>
<ll1_rule_hint (line 13 col 5) ``>
<nonterminal (line 13 col 5) `e`>
<equals (line 13 col 8) `=`>
<parser_expression (line 13 col 10) `parser<expression>`>
<lbrace (line 13 col 29) `{`>
<lparen (line 14 col 7) `(`>
<asterisk (line 14 col 7) `*`>
<colon (line 14 col 7) `:`>
<left (line 14 col 7) `left`>
<rparen (line 14 col 7) `)`>
<expr_rule_hint (line 14 col 16) ``>
<nonterminal (line 14 col 16) `e`>
<equals (line 14 col 16) `=`>
<infix_rule_hint (line 14 col 16) ``>
<nonterminal (line 14 col 16) `e`>
<terminal (line 14 col 16) `add`>
<nonterminal (line 14 col 16) `e`>
<lparen (line 15 col 7) `(`>
<dash (line 15 col 7) `-`>
<colon (line 15 col 7) `:`>
<left (line 15 col 7) `left`>
<rparen (line 15 col 7) `)`>
<expr_rule_hint (line 15 col 16) ``>
<nonterminal (line 15 col 16) `e`>
<equals (line 15 col 16) `=`>
<infix_rule_hint (line 15 col 16) ``>
<nonterminal (line 15 col 16) `e`>
<terminal (line 15 col 16) `subtract`>
<nonterminal (line 15 col 16) `e`>
<lparen (line 16 col 7) `(`>
<asterisk (line 16 col 7) `*`>
<colon (line 16 col 7) `:`>
<left (line 16 col 7) `left`>
<rparen (line 16 col 7) `)`>
<expr_rule_hint (line 16 col 16) ``>
<nonterminal (line 16 col 16) `e`>
<equals (line 16 col 16) `=`>
<infix_rule_hint (line 16 col 16) ``>
<nonterminal (line 16 col 16) `e`>
<terminal (line 16 col 16) `multiply`>
<nonterminal (line 16 col 16) `e`>
<lparen (line 17 col 7) `(`>
<dash (line 17 col 7) `-`>
<colon (line 17 col 7) `:`>
<left (line 17 col 7) `left`>
<rparen (line 17 col 7) `)`>
<expr_rule_hint (line 17 col 16) ``>
<nonterminal (line 17 col 16) `e`>
<equals (line 17 col 16) `=`>
<infix_rule_hint (line 17 col 16) ``>
<nonterminal (line 17 col 16) `e`>
<terminal (line 17 col 16) `divide`>
<nonterminal (line 17 col 16) `e`>
<lparen (line 18 col 7) `(`>
<asterisk (line 18 col 7) `*`>
<colon (line 18 col 7) `:`>
<left (line 18 col 7) `left`>
<rparen (line 18 col 7) `)`>
<expr_rule_hint (line 18 col 16) ``>
<nonterminal (line 18 col 16) `e`>
<equals (line 18 col 16) `=`>
<mixfix_rule_hint (line 18 col 16) ``>
<terminal (line 18 col 21) `lparen_cast`>
<nonterminal (line 18 col 34) `type_name`>
<terminal (line 18 col 45) `rparen`>
<expression_divider (line 18 col 53) `<=>`>
<terminal (line 18 col 57) `lbrace`>
<identifier (line 18 col 65) `list`>
<lparen (line 18 col 69) `(`>
<nonterminal (line 18 col 70) `initializer_list_item`>
<comma (line 18 col 92) `,`>
<terminal (line 18 col 94) `comma`>
<rparen (line 18 col 100) `)`>
<nonterminal (line 18 col 102) `comma_opt`>
<terminal (line 18 col 113) `rbrace`>
<arrow (line 18 col 121) `->`>
<identifier (line 18 col 124) `TypeInitializion`>
<lparen (line 18 col 140) `(`>
<identifier (line 18 col 142) `type`>
<equals (line 18 col 146) `=`>
<nonterminal_reference (line 18 col 147) `1`>
<comma (line 18 col 149) `,`>
<identifier (line 18 col 151) `initializer`>
<equals (line 18 col 162) `=`>
<nonterminal_reference (line 18 col 163) `4`>
<rparen (line 18 col 166) `)`>
<lparen (line 19 col 7) `(`>
<dash (line 19 col 7) `-`>
<colon (line 19 col 7) `:`>
<left (line 19 col 7) `left`>
<rparen (line 19 col 7) `)`>
<expr_rule_hint (line 19 col 16) ``>
<nonterminal (line 19 col 16) `e`>
<equals (line 19 col 16) `=`>
<mixfix_rule_hint (line 19 col 16) ``>
<terminal (line 19 col 21) `identifier`>
<expression_divider (line 19 col 33) `<=>`>
<terminal (line 19 col 37) `lparen`>
<identifier (line 19 col 45) `list`>
<lparen (line 19 col 49) `(`>
<nonterminal (line 19 col 50) `e`>
<comma (line 19 col 52) `,`>
<terminal (line 19 col 54) `comma`>
<rparen (line 19 col 60) `)`>
<terminal (line 19 col 62) `rparen`>
<arrow (line 19 col 70) `->`>
<identifier (line 19 col 73) `FunctionCall`>
<lparen (line 19 col 85) `(`>
<identifier (line 19 col 87) `name`>
<equals (line 19 col 91) `=`>
<nonterminal_reference (line 19 col 92) `$`>
<comma (line 19 col 94) `,`>
<identifier (line 19 col 96) `params`>
<equals (line 19 col 102) `=`>
<nonterminal_reference (line 19 col 103) `2`>
<rparen (line 19 col 106) `)`>
<lparen (line 20 col 7) `(`>
<asterisk (line 20 col 7) `*`>
<colon (line 20 col 7) `:`>
<unary (line 20 col 7) `unary`>
<rparen (line 20 col 7) `)`>
<expr_rule_hint (line 20 col 17) ``>
<nonterminal (line 20 col 17) `e`>
<equals (line 20 col 17) `=`>
<prefix_rule_hint (line 20 col 17) ``>
<terminal (line 20 col 17) `subtract`>
<nonterminal (line 20 col 17) `e`>
<expr_rule_hint (line 21 col 7) ``>
<nonterminal (line 21 col 7) `e`>
<equals (line 21 col 7) `=`>
<mixfix_rule_hint (line 21 col 7) ``>
<terminal (line 21 col 12) `lsquare`>
<identifier (line 21 col 21) `list`>
<lparen (line 21 col 25) `(`>
<nonterminal (line 21 col 26) `e`>
<comma (line 21 col 28) `,`>
<terminal (line 21 col 30) `comma`>
<rparen (line 21 col 36) `)`>
<terminal (line 21 col 38) `rsquare`>
<expr_rule_hint (line 22 col 7) ``>
<nonterminal (line 22 col 7) `e`>
<equals (line 22 col 7) `=`>
<mixfix_rule_hint (line 22 col 7) ``>
<terminal (line 22 col 12) `lbrace`>
<identifier (line 22 col 20) `list`>
<lparen (line 22 col 24) `(`>
<nonterminal (line 22 col 25) `e`>
<comma (line 22 col 27) `,`>
<terminal (line 22 col 29) `comma`>
<rparen (line 22 col 35) `)`>
<terminal (line 22 col 37) `rbrace`>
<expr_rule_hint (line 23 col 7) ``>
<nonterminal (line 23 col 7) `e`>
<equals (line 23 col 7) `=`>
<mixfix_rule_hint (line 23 col 7) ``>
<terminal (line 23 col 12) `lparen`>
<nonterminal (line 23 col 20) `e`>
<terminal (line 23 col 23) `rparen`>
<expr_rule_hint (line 24 col 7) ``>
<nonterminal (line 24 col 7) `e`>
<equals (line 24 col 7) `=`>
<mixfix_rule_hint (line 24 col 7) ``>
<terminal (line 24 col 12) `identifier`>
<expr_rule_hint (line 25 col 7) ``>
<nonterminal (line 25 col 7) `e`>
<equals (line 25 col 7) `=`>
<mixfix_rule_hint (line 25 col 7) ``>
<terminal (line 25 col 12) `number`>
<rbrace (line 26 col 5) `}`>
<rbrace (line 27 col 3) `}`>
<rbrace (line 28 col 1) `}`>