grammar {
  parser<ll1> {
    $start = list($statements, :comma) -> Program( statements=$0 )
    $start = :_empty
    $statements = $e
    $statements = $assignstatement
    $assignstatement = :identifier :eq $e -> Assign( var=$0, val=$2 )
    $e = parser<expression> {
      (*:left) $e = $e :add $e -> Add( lhs=$0, rhs=$2 )
      (-:left) $e = $e :sub $e -> Subtract( lhs=$0, rhs=$2 )
      (*:left) $e = $e :mul $e -> Multiply( lhs=$0, rhs=$2 )
      (-:left) $e = $e :div $e -> Divide( lhs=$0, rhs=$2 )
      (*:unary) $e = :sub $e -> Uminus( arg=$1 )
      $e = :a
      $e = :b
    }
  }
}