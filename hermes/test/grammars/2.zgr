grammar {
  parser<ll1> {
    $start = list($statement, :comma) -> Program( statements=$0 )
    $start = :_empty
    $statement = $e
    $statement = $assignstatement
    $statement = $forstatement
    $assignstatement = :identifier :eq $assignstatementsub -> Assign( var=$0, val=$2 )
    $assignstatementsub = $assignstatement
    $assignstatementsub = $e
    $complexexpression = $e
    $complexexpression = $assignstatement
    $forstatement = :for :lparen $fordeclstatement :semi $forcondstatement :semi $foriterstatement :rparen :lbrace $forbody :rbrace -> For( decl=$2, cond=$4, iter=$6, body=$9 )
    $fordeclstatement = $complexexpression
    $fordeclstatement = :_empty
    $forcondstatement = $e
    $forcondstatement = :_empty
    $foriterstatement = $complexexpression
    $foriterstatement = :_empty
    $forbody = $statement :semi $forbody
    $forbody = :_empty
    $e = parser<expression> {
      (*:left) $e = $e :add $e -> Add( lhs=$0, rhs=$2 )
      (-:left) $e = $e :sub $e -> Subtract( lhs=$0, rhs=$2 )
      (*:left) $e = $e :mul $e -> Multiply( lhs=$0, rhs=$2 )
      (-:left) $e = $e :div $e -> Divide( lhs=$0, rhs=$2 )
      (*:unary) $e = :sub $e -> UMinus( arg=$1 )
      $e = :n
      $e = :s
    }
  }
}