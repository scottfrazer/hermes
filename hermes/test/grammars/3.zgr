grammar {
  parser<ll1> {
    $start = list($statement, :semi) -> Program( statements=$0 )
    $start = :_empty
    $statement = $e
    $statement = $for
    $for = :for :lparen $forsub :semi $forsub :semi $forsub :rparen :lbrace $forbody :rbrace -> For( decl=$2, cond=$4, iter=$6, body=$9 )
    $forsub = $e
    $forsub = :_empty
    $forbody = $statement :semi $forbody
    $forbody = :_empty
    $e = parser<expression> {
      (*:right) $e = $e :eq $e -> Assign( lhs=$0, rhs=$2 )
      (*:left) $e = $e :add $e -> Add( lhs=$0, rhs=$2 )
      (-:left) $e = $e :sub $e -> Subtract( lhs=$0, rhs=$2 )
      (*:left) $e = $e :mul $e -> Multiply( lhs=$0, rhs=$2 )
      (-:left) $e = $e :div $e -> Divide( lhs=$0, rhs=$2 )
      (*:left) $e = $e :power $e -> Power( lhs=$0, rhs=$2 )
      (*:unary) $e = :sub $e -> UMinus( arg=$1 )
      $e = :n
      $e = :s
      $e = :identifier
    }
  }
}