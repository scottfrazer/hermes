grammar {
  lexer {
    r'(a)(b)(c)' -> :a[1] :b[2] :c[3] :abc[0]
    r'(x)\s*(y)\s*(z)' -> :hint[] f(:x[1]) :all
    r'\s+' -> null

    code<python> << PYTHON
    def f(ctx, terminal, source_string, line, col):
        default_action(ctx, terminal, source_string, line, col)
    PYTHON

    code<go> << GO_CODE
    func f(ctx *LexerContext, terminal *terminal, sourceString string, line, col int) int {
        default_action(ctx, terminal, sourceString, line, col)
        return -1
    }
    GO_CODE

    code<c> << C_CODE
    static void f(LEXER_CONTEXT_T * ctx, TERMINAL_T * terminal, char * source_string, int line, int col) {
        default_action(ctx, terminal, source_string, line, col);
    }
    C_CODE

    code<java> << JAVA
    public void f(LexerContext ctx, TerminalIdentifier terminal, String source_string, int line, int col) {
        default_action(ctx, terminal, source_string, line, col);
    }
    JAVA

    code<javascript> << JAVASCRIPT
    function f(ctx, terminal, source_string, line, col) {
        default_action(ctx, terminal, source_string, line, col);
    }
    JAVASCRIPT
  }
}
